{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","App","shuffle","array","i","length","j","Math","floor","random","temp","playGame","event","setState","imageClicked","state","concat","target","id","console","log","indexOf","currentScore","score","currentTopScore","topScore","message","resetGame","images","randomIndex","tempItem","bind","className","this","map","image","src","url","alt","name","key","width","height","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oq0BAUeA,MARf,WACI,OACI,6BACI,sD,OCsGGC,E,kDA3Fb,aAAe,IAAD,8BACZ,gBAYFC,QAAU,SAACC,GAET,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,GArBK,EAuBdQ,SAAW,SAACC,GAIV,GAHA,EAAKC,SAAS,CAAEC,aAAc,EAAKC,MAAMD,aAAaE,OAAOJ,EAAMK,OAAOC,MAC1EC,QAAQC,IAAI,uBAAyB,EAAKL,MAAMD,eAEU,IAAtD,EAAKC,MAAMD,aAAaO,QAAQT,EAAMK,OAAOC,IAAY,CAC3DC,QAAQC,IAAI,aACZ,IAAIE,EAAe,EAAKP,MAAMQ,MAC9BD,IACA,IAAIE,EAAkB,EAAKT,MAAMU,SAC7BH,EAAeE,GACjBA,IAEF,EAAKX,SAAS,CAAEU,MAAOD,EAAcG,SAAUD,EAAiBE,QAAS,0BACzEP,QAAQC,IAAI,EAAKL,YAGjBI,QAAQC,IAAI,mBACZD,QAAQC,IAAI,EAAKL,MAAMD,aAAcF,EAAMK,OAAOC,IAClD,EAAKS,YAEP,EAAKzB,QAAQ0B,IA3CD,EA8Cd1B,QAAU,SAACC,GACT,IAAI0B,EAAaC,EAAU1B,EAC3B,IAAKA,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAChCyB,EAActB,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAC9C0B,EAAW3B,EAAMC,GACjBD,EAAMC,GAAKD,EAAM0B,GACjB1B,EAAM0B,GAAeC,EAEvB,OAAO3B,GAtDK,EAyDdwB,UAAY,WACV,EAAKd,SAAS,CAAEU,MAAO,EAAGT,aAAc,GAAIY,QAAS,kCAxDrD,EAAKX,MAAQ,CACXa,SACAL,MAAO,EACPE,SAAU,EACVX,aAAc,GACdY,QAAS,kBAEX,EAAKf,SAAW,EAAKA,SAASoB,KAAd,gBAChBZ,QAAQC,IAAR,gBAVY,E,qDA+DJ,IAAD,OACP,OACE,yBAAKY,UAAU,OACb,kBAAC,EAAD,MACA,uBACAA,UAAkC,iCAAvBC,KAAKlB,MAAMW,QAA6C,uBAAwB,IACzFO,KAAKlB,MAAMW,SACb,qCAAWO,KAAKlB,MAAMQ,OACtB,yCAAeU,KAAKlB,MAAMU,UAC1B,yBAAKP,GAAG,SAASc,UAAkC,iCAAvBC,KAAKlB,MAAMW,QAA6C,iBAAkB,IACnGE,EAAOM,KAAI,SAAAC,GAAK,OACf,yBACEC,IAAKD,EAAME,IACXnB,GAAIiB,EAAMjB,GACVoB,IAAKH,EAAMI,KACXC,IAAKL,EAAMjB,GACXuB,MAAM,QACNC,OAAO,QACPC,QAAS,EAAKhC,oB,GA1FViC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMpC,c","file":"static/js/main.7c1a8ff3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Navbar() {\n    return (\n        <div>\n            <h1>Avengers Clicky Game</h1>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport { Component } from 'react'\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n\n  // state = {\n  //   images,\n  //   score: 0,\n  //   topScore: 0,\n  //   imageClicked: []\n  // }\n\n  constructor() {\n    super();\n    this.state = {\n      images,\n      score: 0,\n      topScore: 0,\n      imageClicked: [],\n      message: \"Click an image\"\n    }\n    this.playGame = this.playGame.bind(this);\n    console.log(this)\n  }\n\n  shuffle = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  playGame = (event) => {\n    this.setState({ imageClicked: this.state.imageClicked.concat(event.target.id) })\n    console.log(\"imageclicked array: \" + this.state.imageClicked)\n\n    if (this.state.imageClicked.indexOf(event.target.id) === -1) {\n      console.log(\"new click\")\n      var currentScore = this.state.score\n      currentScore++;\n      var currentTopScore = this.state.topScore\n      if (currentScore > currentTopScore) {\n        currentTopScore++;\n      }\n      this.setState({ score: currentScore, topScore: currentTopScore, message: \"You guessed correctly\" })\n      console.log(this.state)\n    }\n    else {\n      console.log(\"already clicked\")\n      console.log(this.state.imageClicked, event.target.id)\n      this.resetGame();\n    }\n    this.shuffle(images);\n  }\n\n  shuffle = (array) => {\n    var randomIndex, tempItem, i;\n    for (i = array.length - 1; i > 0; i--) {\n      randomIndex = Math.floor(Math.random() * (i + 1));\n      tempItem = array[i];\n      array[i] = array[randomIndex];\n      array[randomIndex] = tempItem;\n    }\n    return array;\n  }\n\n  resetGame = () => {\n    this.setState({ score: 0, imageClicked: [], message: \"You already guessed that one\" })\n\n    // alert(\"you alredy clicked that picture\")\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <p\n        className={this.state.message === \"You already guessed that one\" ? \"animated flash wrong\": \"\"}\n        >{this.state.message}</p>\n        <p>Score: {this.state.score}</p>\n        <p>Top Score: {this.state.topScore}</p>\n        <div id=\"images\" className={this.state.message === \"You already guessed that one\" ? \"animated shake\": \"\"}>\n          {images.map(image => (\n            <img\n              src={image.url}\n              id={image.id}\n              alt={image.name}\n              key={image.id}\n              width=\"175px\"\n              height=\"175px\"\n              onClick={this.playGame}\n            />\n\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}